@page "/upcomingbookings"
@using DomainModels
@inject AppState AppState
@using System.Globalization
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<h3>Upcoming Bookings</h3>
<button @onclick=UpdateBookings>Update</button>

<div class="form-group">
    <input type="text" class="form-control" placeholder="Search bookings..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterBookings" />
</div>

@if (filteredBookings != null && filteredBookings.Any())
{
    @foreach (DomainModels.Booking booking in filteredBookings)
    {
        <div class="card">
            <div class="card-body">
                <p class="card-text">Room: @booking.RoomId</p>
                <p class="card-text">UserID: @booking.UserId</p>
                <p class="card-text">Full Name: @GetUserName(booking.UserId)</p>
                <p class="card-text">Start Date: @booking.StartDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</p>
                <p class="card-text">End Date: @booking.EndDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</p>
                @if (AppState.IsAdmin)
                {
                    <a href="/editbooking/@booking.BookingId" class="btn btn-primary">Edit Booking</a>
                }
                
            </div>
        </div>
    }
}
else
{
    <p>No bookings available.</p>
}

@code {
    // List to store bookings fetched from the API
    List<DomainModels.Booking> bookings = new();
    List<DomainModels.Booking> filteredBookings = new();

    private Dictionary<int, string> userNames = new();

    // Message for error or status display
    string message = "";

    private string searchTerm = "";

    // Called when the page initializes
    protected override async Task OnInitializedAsync()
    {
        //check permission else redirect to start page
        if (!AppState.LoggedIn || !AppState.IsAdmin) NavManager.NavigateTo("/");

        await UpdateBookings();
        await LoadUserNames();
    }

    // Method to update bookings list by calling the API
    async Task UpdateBookings()
    {
        try
        {
            // API call to fetch bookings
            var response = await HttpClient.GetAsync("api/Bookings/all");

            if (response.IsSuccessStatusCode)
            {
                // Deserialize response to List<DomainModels.Booking>
                bookings = await response.Content.ReadFromJsonAsync<List<DomainModels.Booking>>() ?? new List<DomainModels.Booking>();
                filteredBookings = bookings;
                message = "Bookings updated successfully.";
            }
            else
            {
                message = "Failed to fetch bookings.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }

        // Force UI to re-render after bookings update
        StateHasChanged();
    }

    // Loads all user names from the API
    private async Task LoadUserNames()
    {
        try
        {
            var users = await HttpClient.GetFromJsonAsync<List<User>>("api/Users/all");
            if (users != null)
            {
                userNames = users.ToDictionary(user => user.UserId, user => user.FullName);
                Console.WriteLine("User names loaded successfully.");
            }
            else
            {
                Console.WriteLine("No users found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user names: {ex.Message}");
        }
    }

    // Method to get the full name based on UserId
    private string GetUserName(int userId)
    {
        if (userNames.ContainsKey(userId))
        {
            return userNames[userId];
        }
        else
        {
            Console.WriteLine($"User ID {userId} not found in userNames dictionary.");
            return "Unknown User";
        }
    }

    // Method to filter bookings based on search term
    private void FilterBookings()
    {
        filteredBookings = bookings.Where(b =>
            b.RoomId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            b.UserId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            GetUserName(b.UserId).Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            b.StartDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture).Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            b.EndDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture).Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }
}



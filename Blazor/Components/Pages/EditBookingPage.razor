@page "/editbooking/{BookingId:int}"
@using DomainModels
@using System.Globalization
@inject HttpClient HttpClient
@inject NavigationManager NavManager


<h3>Edit Booking</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (booking == null)
{
    <p>Loading...</p>
}
else
{
    <div class="form-group">
        <label for="guestName">Guest Name</label>
        <input id="guestName" class="form-control" @bind="@booking.FullName" />
    </div>
    <div class="form-group">
        <label for="guestEmail">Guest Email</label>
        <input id="guestEmail" class="form-control" @bind="@booking.Email" />
    </div>
    <div class="form-group">
        <label for="startDate">Start Date</label>
        <input id="startDate" type="date" class="form-control" @bind="@booking.StartDate" />
    </div>
    <div class="form-group">
        <label for="endDate">End Date</label>
        <input id="endDate" type="date" class="form-control" @bind="@booking.EndDate" />
    </div>
    <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
    <button class="btn btn-primary" @onclick="Delete">Delete</button>
}

@code {
    [Parameter]
    public int BookingId { get; set; }

    private DomainModels.Booking booking = new();
    private string successMessage = "";
    private string errorMessage = "";

    // This method is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await GetBooking();
    }

    // Method to fetch the booking details from the API
    private async Task GetBooking()
    {
        try
        {
            booking = await HttpClient.GetFromJsonAsync<DomainModels.Booking>($"api/Bookings/id/{BookingId}");
            if (booking == null)
            {
                errorMessage = "Booking not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching booking: {ex.Message}";
        }
    }


    // Method to save the changes made to the booking
    private async Task SaveChanges()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync("api/Bookings/update", booking);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Booking updated successfully!";
                errorMessage = "";
            }
            else
            {
                errorMessage = "Failed to update booking.";
                successMessage = "";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating booking: {ex.Message}";
            successMessage = "";
        }
    }

    // Method to delete the booking
    private async Task Delete()
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"api/Bookings/id/{BookingId}");

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Booking deleted successfully!";
                errorMessage = "";
                NavManager.NavigateTo("/upcomingbookings");
            }
            else
            {
                errorMessage = "Failed to delete booking.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting booking: {ex.Message}";
        }
    }
}

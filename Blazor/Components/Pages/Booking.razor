@page "/booking"
@using System.Net.Mail
@using System.Net
@inject HttpClient httpClient
@inject Services.DatabaseServices DBServices

<PageTitle>Book a room</PageTitle>

<head>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

@if (bookingCompleted == false)
{
    <h1>Book a room</h1>

    <p>Enter guest name:</p>
    <input type="text" @bind="guest.GuestName" placeholder="Enter text" />
    <p></p>

    <p>Enter guest email:</p>
    <input type="text" @bind="guest.GuestEmail" placeholder="Enter email" />
    <p></p>

    <p>Enter guest phone number:</p>
    <input type="text" @bind="guest.GuestPhoneNr" placeholder="Enter phone number" />
    <p></p>

    <p>From:</p>
    <input type="date" @bind="guest.StartDate" min="@DateTime.Now" />
    <p></p>

    <p>To:</p>
    <input type="date" @bind="guest.EndDate" min="@startDate.AddDays(1)" />

    <div class="dropdown mt-3">
        @if (roomType != null)
        {
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                @roomType (@price per night)
            </button>
        }
        else
        {
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                Choose desired room type
            </button>
        }
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <li><button class="dropdown-item" @onclick="() => SetRoomType(0)">Standard single (600 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(1)">Standard double (800 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(2)">Premium single (900 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(3)">Premium double (1200 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(4)">Penthouse (3000 dkk pr night)</button></li>
        </ul>
    </div>

    <button class="btn btn-primary" @onclick="FinishBooking">Click me</button>

}
else
{
    <h1>Booking confirmation:</h1>

    <p>Name: @guest.GuestName</p>
    <p></p>

    <p>Email: @guest.GuestEmail</p>
    <p></p>

    <p>Phone number: @guest.GuestPhoneNr</p>
    <p></p>

    <p>Room type and cost: @roomType (@price per night)</p>
    <p></p>

    <p>From: @DateOnly.FromDateTime(guest.StartDate)</p>
    <p></p>

    <p>To: @DateOnly.FromDateTime(guest.EndDate)</p>
    <p></p>

    <button class="btn btn-primary" @onclick="GoToBooking">Create another booking</button>

}

@code {
    //Wont work if the mail or pw(password) isn't inserted with a real mail
    string guestPassword = "TrinityGuest!"; //this is for access to see if mail was sent correctly if logged out from temp guest mail
    string bookingMail = "trinityHotelEmployee@outlook.com";
    string password = "TrinityBooking!";
    string guestName = "";
    string guestEmail = "trinityHotelGuest@outlook.com";
    string guestPhoneNr = "";
    string roomType = "";

    public CreateBookingDTO guest = new CreateBookingDTO()
    {
        StartDate = DateTime.Now,
        EndDate = DateTime.Now.AddDays(1),
        RoomId = 1,
        // UserId = 1
    };

    bool bookingCompleted = false;

    DateTime startDate = DateTime.Now;
    DateTime endDate = DateTime.Now.AddDays(1);

    int price;
    int roomId = 2;

    private void SetRoomType(int typeIndex)
    {
        switch (typeIndex)
        {
            case 0:
                roomType = "Standard single";
                price = 600;
                break;
            case 1:
                roomType = "Standard double";
                price = 800;
                break;
            case 2:
                roomType = "premium single";
                price = 900;
                break;
            case 3:
                roomType = "premium double";
                price = 1200;
                break;
            case 4:
                roomType = "penthouse";
                price = 3000;
                break;
        }
        Console.WriteLine($"Selected Room Type: {roomType}");
    }

    private async Task FinishBooking()
    {
        bookingCompleted = true;
        await SendMail();
        await CreateBooking();
    }

    public async Task SendMail()
    {
        Console.WriteLine("test");

        SmtpClient client = new SmtpClient("smtp-mail.outlook.com", 587)
            {
                EnableSsl = true,
                Credentials = new NetworkCredential(bookingMail, password)
            };

        try
        {
            //Don't forget to make the (MailTo) to a real mail to send it to
            await client.SendMailAsync(new MailMessage(bookingMail, guestEmail, "Trinity hotel", $"Confirmed booking \n name: {guestName} \n email: {guestEmail} \n number: {guestPhoneNr} \n selected room type: {roomType} \n from: {DateOnly.FromDateTime(startDate)} \n To: {DateOnly.FromDateTime(endDate)}"));
            Console.WriteLine("Mail sent successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to send mail: {ex.Message}");
        }
    }

    private async Task CreateBooking()
    {
        await DBServices.CreateBooking(guest);
    }

    public void GoToBooking()
    {
        bookingCompleted = false;
    }
}
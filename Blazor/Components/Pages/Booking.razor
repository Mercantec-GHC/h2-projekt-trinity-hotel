@page "/booking"
@inject AppState AppState
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<PageTitle>Book a room</PageTitle>


<h1>Book a room</h1>

<div class="mb-3">
    <label for="startDate" class="form-label">From:</label>
    <input type="date" class="form-control" id="startDate" @bind="booking.StartDate" min="@booking.StartDate.ToString("yyyy-MM-dd")" />
</div>

<div class="mb-3">
    <label for="endDate" class="form-label">To:</label>
    <input type="date" class="form-control" id="endDate" @bind="booking.EndDate" min="@booking.EndDate.ToString("yyyy-MM-dd")" />
</div>


<div class="mb-3">
 @if (errorMessage== ""){
    @if (Rooms.Count > 0){
        @foreach (var room in Rooms)
        {
            <div style="outline: 3px solid black; width:25%;">
                <p>@GetRoomTypeName(room.Type)</p>
                <p>@room.Price</p>
                <button class="btn btn-link" @onclick="() => FinishBooking(room.RoomId)"> book </button>
            </div>
        }
    }
    else
    {
            <p>Loading...</p>
        }

    }
    else
    {

        <h2>Booking Failed</h2>
        <p>@errorMessage</p>
        <button class="btn btn-link" @onclick="@(() => errorMessage="")">Ok</button>

    }

</div>




@code {
    private DomainModels.Booking booking = new DomainModels.Booking();
    private List<DomainModels.Room> Rooms = new List<DomainModels.Room>();
    private DomainModels.Room? selectedRoom;
    private string errorMessage = "";
    public bool bookingCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        LoadRooms();
        booking.StartDate = DateTime.UtcNow;
        booking.EndDate = DateTime.UtcNow.AddDays(1);
    }

    private async Task LoadRooms()
    {
        try
        {
            Rooms = await HttpClient.GetFromJsonAsync<List<DomainModels.Room>>("api/Rooms") ?? new List<DomainModels.Room>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading rooms: {ex.Message}");
            // Handle error (e.g., show a message to the user)
        }
        StateHasChanged();
    }

    private string GetRoomTypeName(int type)
    {
        return type switch
        {
            0 => "Standard Single",
            1 => "Standard Double",
            2 => "Premium Single",
            3 => "Premium Double",
            4 => "Penthouse",
            _ => "Unknown"
        };
    }

    private async Task FinishBooking(int selectedRoomId)
    {

        selectedRoom = Rooms.FirstOrDefault(r => r.RoomId == selectedRoomId);
        if (selectedRoom == null)
        {
            errorMessage = "Invalid room selection.";
            return;
        }

        booking.RoomId = selectedRoom.RoomId;
        booking.UserId = AppState.UserId; // Assuming a default user ID for now

                                          // Convert StartDate and EndDate to UTC
        booking.StartDate = booking.StartDate.ToUniversalTime();
        booking.EndDate = booking.EndDate.ToUniversalTime();

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/Bookings/add", booking);
            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/profilepage");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

}
@page "/booking"
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<PageTitle>Book a room</PageTitle>

<h1>Book a room</h1>

@if (!bookingCompleted)
{
    <div class="mb-3">
        <label for="fullName" class="form-label">Full Name:</label>
        <input type="text" class="form-control" id="fullName" @bind="booking.FullName" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email:</label>
        <input type="email" class="form-control" id="email" @bind="booking.Email" />
    </div>

    <div class="mb-3">
        <label for="phoneNr" class="form-label">Phone Number:</label>
        <input type="tel" class="form-control" id="phoneNr" @bind="booking.PhoneNr" />
    </div>

    <div class="mb-3">
        <label for="startDate" class="form-label">From:</label>
        <input type="date" class="form-control" id="startDate" @bind="booking.StartDate" min="@DateTime.UtcNow.ToString("yyyy-MM-dd")" />
    </div>

    <div class="mb-3">
        <label for="endDate" class="form-label">To:</label>
        <input type="date" class="form-control" id="endDate" @bind="booking.EndDate" min="@booking.StartDate.AddDays(1).ToString("yyyy-MM-dd")" />
    </div>

    <div class="mb-3">
        <label for="roomType" class="form-label">Room Type:</label>
        <select class="form-select" id="roomType" @bind="selectedRoomType">
            <option value="">Choose desired room type</option>
            @foreach (var room in availableRooms)
            {
                <option value="@room.RoomId">@GetRoomTypeName(room.Type) (@room.Price DKK per night)</option>
            }
        </select>
    </div>

    <button class="btn btn-primary" @onclick="FinishBooking">Book Now</button>
}
else
{
    @if (bookingSuccessful)
    {
        <h2>Booking Confirmation:</h2>
        <p>Name: @booking.FullName</p>
        <p>Email: @booking.Email</p>
        <p>Phone number: @booking.PhoneNr</p>
        <p>Room type and cost: @GetRoomTypeName(selectedRoom.Type) (@selectedRoom.Price DKK per night)</p>
        <p>From: @booking.StartDate.ToShortDateString()</p>
        <p>To: @booking.EndDate.ToShortDateString()</p>
        <button class="btn btn-primary" @onclick="ResetBooking">Create another booking</button>
    }
    else
    {
        <h2>Booking Failed</h2>
        <p>@errorMessage</p>
        <button class="btn btn-primary" @onclick="ResetBooking">Try Again</button>
    }
}

@code {
    private DomainModels.Booking booking = new DomainModels.Booking();
    private List<DomainModels.Room> availableRooms = new List<DomainModels.Room>();
    private int selectedRoomType;
    private DomainModels.Room selectedRoom;
    private bool bookingCompleted = false;
    private bool bookingSuccessful = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableRooms();
        booking.StartDate = DateTime.UtcNow;
        booking.EndDate = DateTime.UtcNow.AddDays(1);
    }

    private async Task LoadAvailableRooms()
    {
        try
        {
            availableRooms = await HttpClient.GetFromJsonAsync<List<DomainModels.Room>>("api/Rooms/types") ?? new List<DomainModels.Room>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading rooms: {ex.Message}");
            // Handle error (e.g., show a message to the user)
        }
    }

    private string GetRoomTypeName(int type)
    {
        return type switch
        {
            0 => "Standard Single",
            1 => "Standard Double",
            2 => "Premium Single",
            3 => "Premium Double",
            4 => "Penthouse",
            _ => "Unknown"
        };
    }

    private async Task FinishBooking()
    {
        if (string.IsNullOrWhiteSpace(booking.FullName) || string.IsNullOrWhiteSpace(booking.Email) || selectedRoomType == 0)
        {
            errorMessage = "Please fill in all required fields.";
            bookingCompleted = true;
            bookingSuccessful = false;
            return;
        }

        selectedRoom = availableRooms.FirstOrDefault(r => r.RoomId == selectedRoomType);
        if (selectedRoom == null)
        {
            errorMessage = "Invalid room selection.";
            bookingCompleted = true;
            bookingSuccessful = false;
            return;
        }

        booking.RoomId = selectedRoom.RoomId;
        booking.UserId = 1; // Assuming a default user ID for now

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/Bookings/add", booking);
            if (response.IsSuccessStatusCode)
            {
                bookingSuccessful = true;
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                bookingSuccessful = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            bookingSuccessful = false;
        }

        bookingCompleted = true;
    }

    private void ResetBooking()
    {
        booking = new DomainModels.Booking
            {
                StartDate = DateTime.UtcNow,
                EndDate = DateTime.UtcNow.AddDays(1)
            };
        selectedRoomType = 0;
        bookingCompleted = false;
        bookingSuccessful = false;
        errorMessage = "";
    }
}
@page "/booking/{user_id:int?}"
@using DomainModels
@inject Services.MailServices MailServices
@inject AppState AppState
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<PageTitle>Book a room</PageTitle>


<h1>Book a room</h1>

<div class="mb-3">
    <label for="startDate" class="form-label">From:</label>
    <input type="date" class="form-control" id="startDate"
           value="@booking.StartDate.ToString("yyyy-MM-dd")"
           @oninput="@(e => OnDateChange(e, "StartDate"))" />
</div>

<div class="mb-3">
    <label for="endDate" class="form-label">To:</label>
    <input type="date" class="form-control" id="endDate"
           value="@booking.EndDate.ToString("yyyy-MM-dd")"
           @oninput="@(e => OnDateChange(e, "EndDate"))" />
</div>

@if (errorMessage == "")
{
    @if (Rooms.Count > 0)
    {
        <button class="btn btn-dark" @onclick="() => sort_rooms()"> Sort by price </button>

        <div class="mb-3">

            @foreach (var roomBook in roomBookings)
            {
                <div class="card mt-3" style="width:20vw;height:50vh;float:left;margin-right:0.5vw; margin-bottom:5vw;">
                    <div class="card-body">
                        <img src="@GetRoomImageLink(roomBook.Room.Type)"
                             alt="@GetRoomTypeName(roomBook.Room.Type)"
                             class="card-img-top" />

                        <p>@GetRoomTypeName(roomBook.Room.Type)</p>
                        <p>@roomBook.Room.Price DKK</p>

                        @if (roomBook.isBooked == false)
                        {
                            <button class="btn btn-dark" @onclick="() => FinishBooking(roomBook.Room.RoomId)"> Book </button>
                        }
                        else
                        {
                            <button class="btn btn-danger"> Unavailable </button>
                        }
                    </div>
                </div>
            }
        </div>

    }
    else
    {
        <p>Loading...</p>
    }

}
else
{

    <h2>Booking Failed</h2>
    <p>@errorMessage</p>
    <button class="btn btn-link" @onclick="@(() => errorMessage="")">Ok</button>

}





@code {
    private User user = new User();
    private DomainModels.Booking booking = new DomainModels.Booking();
    private List<DomainModels.Room> Rooms = new List<DomainModels.Room>();
    private List<DomainModels.Booking> Bookings = new List<DomainModels.Booking>();
    private List<DomainModels.Booking> existingBookings = new List<DomainModels.Booking>();
    private DomainModels.Room? selectedRoom;
    private string errorMessage = "";
    public bool bookingCompleted = false;
    public struct room_booking
    {
        public DomainModels.Room Room;
        public bool isBooked;
    }
    private List<room_booking> roomBookings = new List<room_booking>();

    private bool sort_decreasing = false;

    [Parameter]
    public int? user_id { get; set; }




    private void sort_rooms()
    {
        if (sort_decreasing)
        {
            roomBookings = roomBookings.OrderByDescending(rb => rb.Room.Price).ToList();
        }
        else
        {
            roomBookings = roomBookings.OrderBy(rb => rb.Room.Price).ToList();
        }
        sort_decreasing = !sort_decreasing;
    }

    protected override void OnInitialized()
    {
        if (AppState.IsAdmin && AppState.LoggedIn)
        {

        }
        else
        {
            user_id = null; // dont allow normal users to change it
        }
        booking.StartDate = DateTime.UtcNow;
        booking.EndDate = DateTime.UtcNow.AddDays(1);
        LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            Rooms = await HttpClient.GetFromJsonAsync<List<DomainModels.Room>>("api/Rooms") ?? new List<DomainModels.Room>();
            Bookings = await HttpClient.GetFromJsonAsync<List<DomainModels.Booking>>("api/Bookings/all") ?? new List<DomainModels.Booking>();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading rooms: {ex.Message}");
            // Handle error (e.g., show a message to the user)
        }

        foreach (var room in Rooms)
        {
            room_booking roomBooking = new room_booking
                {
                    Room = room,
                    isBooked = false
                };
            roomBookings.Add(roomBooking);
        }

        updateRoomBook();

        StateHasChanged();
    }

    private void updateRoomBook()
    {

        var existingBookings = Bookings
            .Where(b =>
                (booking.StartDate >= b.StartDate && booking.StartDate < b.EndDate) ||
                (booking.EndDate > b.StartDate && booking.EndDate <= b.EndDate) ||
                (booking.StartDate <= b.StartDate && booking.EndDate >= b.EndDate))
            .ToList();

        for (int i = 0; i < roomBookings.Count; i++)
        {
            var rb = roomBookings[i];
            rb.isBooked = false;
            roomBookings[i] = rb;

        }


        foreach (var b in existingBookings)
        {

            for (int i = 0; i < roomBookings.Count; i++)
            {
                var rb = roomBookings[i];
                if (rb.Room.RoomId == b.RoomId)
                {
                    rb.isBooked = true;
                }
                roomBookings[i] = rb;
            }
        }
        StateHasChanged();

    }

    private async Task OnDateChange(ChangeEventArgs e, string type)
    {
        //Get date from input

        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            if (type == "StartDate")
                booking.StartDate = DateTime.SpecifyKind(newDate, DateTimeKind.Utc);
            else
                booking.EndDate = DateTime.SpecifyKind(newDate, DateTimeKind.Utc);
        }
        else
        {
            errorMessage = "Error parsing date";
            return;
        }

        updateRoomBook();
    }



    private string GetRoomTypeName(int type)
    {
        return type switch
        {
            0 => "Standard Single",
            1 => "Standard Double",
            2 => "Premium Single",
            3 => "Premium Double",
            4 => "Penthouse",
            _ => "Unknown"
        };
    }

    private async Task FinishBooking(int selectedRoomId)
    {

        if (!AppState.LoggedIn)
        {
            NavManager.NavigateTo("/create-profile");

        }

        booking.RoomId = selectedRoomId;
        booking.UserId = user_id ?? AppState.UserId; // user ID


        // Convert StartDate and EndDate to UTC


        booking.StartDate = booking.StartDate;
        booking.EndDate = booking.EndDate;

        try
        {
            // Fetch user details
            user = await HttpClient.GetFromJsonAsync<User>($"api/Users/{booking.UserId}");
            if (user == null)
            {
                errorMessage = "User not found.";
                return;
            }

            var response = await HttpClient.PostAsJsonAsync("api/Bookings/add", booking);
            if (response.IsSuccessStatusCode)
            {
                // Send confirmation email
                int maxBookingId = await (await HttpClient.GetAsync("api/Bookings/max-booking-id")).Content.ReadFromJsonAsync<int>();


                string bookingDetails = $"Booking ID: {maxBookingId}\n" +
                                                  $"Room ID: {booking.RoomId}\n" +
                                                    $"Check-in: {booking.StartDate.ToLocalTime().ToShortDateString()}\n" +
                                                    $"Check-out: {booking.EndDate.ToLocalTime().ToShortDateString()}";
                await MailServices.SendEmail(user.Email, "Booking Confirmation", bookingDetails); 

                if (AppState.UserId == booking.UserId) // booking for yourself
                    NavManager.NavigateTo("/profilepage");
                else if (AppState.LoggedIn && AppState.IsAdmin) // booking for other user
                    NavManager.NavigateTo("/upcomingbookings");
                else // something went wrong?
                    NavManager.NavigateTo("/");

            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    @code {
        private string GetRoomImageLink(int roomType)
        {
            return roomType switch
            {
                0 => "https://i.ibb.co/TPBZHQ9/image.jpg",
                1 => "https://i.ibb.co/LRkWM8b/Double-room-standard.jpg",
                2 => "https://i.ibb.co/VjdLzrP/2.jpg",
                3 => "https://i.ibb.co/Mn2zQKt/Double-room-premium.jpg",
                4 => "https://i.ibb.co/Y3rtKtm/4.jpg",
                _ => "Not Found",
            };
        }
    }


}

@page "/booking"
@using System.Net.Mail
@using System.Net
@inject HttpClient httpClient
@inject Services.DatabaseServices DBServices

<PageTitle>Book a room</PageTitle>

<head>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

@if (bookingCompleted == false)
{
    <h1>Book a room</h1>

    <p>Enter guest name:</p>
    <input type="text" @bind="booking.GuestName" placeholder="Enter text" />
    <p></p>

    <p>Enter guest email:</p>
    <input type="text" @bind="booking.GuestEmail" placeholder="Enter email" />
    <p></p>

    <p>Enter guest phone number:</p>
    <input type="text" @bind="booking.GuestPhoneNr" placeholder="Enter phone number" />
    <p></p>

    <p>From:</p>
    <input type="date" @bind="booking.StartDate" min="@DateTime.UtcNow" />
    <p></p>

    <p>To:</p>
    <input type="date" @bind="booking.EndDate" min="@startDate.AddDays(1)" />

    <div class="dropdown mt-3">
        @if (roomType != null)
        {
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                @roomType (@price per night)
            </button>
        }
        else
        {
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                Choose desired room type
            </button>
        }
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <li><button class="dropdown-item" @onclick="() => SetRoomType(0)">Standard single (600 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(1)">Standard double (800 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(2)">Premium single (900 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(3)">Premium double (1200 dkk pr night)</button></li>
            <li><button class="dropdown-item" @onclick="() => SetRoomType(4)">Penthouse (3000 dkk pr night)</button></li>
        </ul>
    </div>

    <button class="btn btn-primary" @onclick="FinishBooking">Click me</button>

}
else if (roomFree)
{
    <h1>Booking confirmation:</h1>

    <p>Name: @booking.GuestName</p>
    <p></p>

    <p>Email: @booking.GuestEmail</p>
    <p></p>

    <p>Phone number: @booking.GuestPhoneNr</p>
    <p></p>

    <p>Room type and cost: @roomType (@price per night)</p>
    <p></p>

    <p>From: @DateOnly.FromDateTime(booking.StartDate)</p>
    <p></p>

    <p>To: @DateOnly.FromDateTime(booking.EndDate)</p>
    <p></p>

    <button class="btn btn-primary" @onclick="GoToBooking">Create another booking</button>

}
else if (!roomFree)
{
    <h1>No rooms of type available for selected dates</h1>
}

@code {
    //these are used to be able to log in to the mails we use for testing
    string guestPassword = "TrinityGuest!";
    string bookingMail = "trinityHotelEmployee@outlook.com";
    string password = "TrinityBooking!";
    string roomType = "standard single";

    //this is used to give feedback to the user as to whether a booking went through or not
    bool bookingCompleted = false;
    //this is used to check if a room is free and stop from looping through more than necessary if a room is booked at least one date in the selected range of dates
    bool roomFree = true;

    //booking placeholder that has the values getting filled into the booking table in DB
    public CreateBookingDTO booking = new CreateBookingDTO()
        {
            GuestEmail = "trinityHotelGuest@outlook.com",
            StartDate = DateTime.UtcNow.AddHours(3),
            EndDate = DateTime.UtcNow.AddDays(1),
            RoomId = 1,
            UserId = 1
        };

    //Placeholder room that is used for a put function to the database so we can update booked days for a room in DB
    private Room room = new Room();

    //Start date and end date for the booking, start date is included but end date is the day the guest is checking out
    //we decided the end date should not be saved as a booked date on the room so someone else can check in that day
    //we also decided to include start date, that way a room can get 
    //freed up, cleaned and then someone can check in and get it on the same day,
    //without two people booking the same room from that day
    DateTime startDate = DateTime.UtcNow;
    DateTime endDate = DateTime.UtcNow.AddDays(1);

    //this is used to display the price of currently selected roomtype on the dropdown
    int price = 600;

    //this function is used by the dropdown further up to set a roomtype and a price, 
    // roomtype is used to make sure the room attached to the booking will be the correct type
    private void SetRoomType(int typeIndex)
    {
        switch (typeIndex)
        {
            case 0:
                roomType = "standard single";
                price = 600;
                break;
            case 1:
                roomType = "standard double";
                price = 800;
                break;
            case 2:
                roomType = "premium single";
                price = 900;
                break;
            case 3:
                roomType = "premium double";
                price = 1200;
                break;
            case 4:
                roomType = "penthouse";
                price = 3000;
                break;
        }
        Console.WriteLine($"Selected Room Type: {roomType}");
    }


    //we use this function to do what we need to do when the guest finishes a booking
    //first we make the booking by calling a function in charge of doing everything related to the booking
    //then if the booking has a room we will send an email to the guest
    //finally we set booking completed to true which will display the result to the guest
    private async Task FinishBooking()
    {
        await CreateBooking();
        if(booking.RoomId > 0)
        {
            await SendMail();
        }
        bookingCompleted = true;
    }


    //this function is used to send a mail to a guest with a booking confirmation, through the email address defined above
    //here we call a function that currently uses a predefined guest email to send the email to
    public async Task SendMail()
    {

        Console.WriteLine("test");

        Services.MailServices mailServices = new Services.MailServices();
        await mailServices.SendEmail(bookingMail, 
            "Trinity hotel", 
            $"Confirmed booking \n name: {booking.GuestName} \n email: {booking.GuestEmail} \n number: {booking.GuestPhoneNr} \n selected room type: {roomType} \n from: {DateOnly.FromDateTime(startDate)} \n To: {DateOnly.FromDateTime(endDate)}");
    }

    //this calls a function that gives the id of a room that is free for the duration of the booking
    //then it saves that ID in a room as well as in a booking,
    //if there was a free room of the room type for the duration two things happen:
    //the room with our information is then used to update the corresponding room in the DB through our DBServices call
    //finally the booking is used to create a new booking in DB through DBServices
    private async Task CreateBooking()
    {
        booking.RoomId = await GetRoom();
        room.RoomId = booking.RoomId;
        if (booking.RoomId > 0)
        {
            await DBServices.InsertBookedDaysInRoomTable(room, booking.RoomId);
            await DBServices.CreateBooking(booking);
        }
    }

    //this is used to allow the user to book another room after the first booking has gone through
    public void GoToBooking()
    {
        bookingCompleted = false;
    }

    //this function makes a call to a DB services method to get all rooms,
    //then it goes through all the rooms untill it finds one that is free for the booking dates,
    //finally it saves all booking dates to a new rooms booked days list for use later
    private async Task<int> GetRoom()
    {
        List<Room> rooms = await DBServices.GetAllRooms();
        foreach (Room potentialRoom in rooms)
        {
            if (potentialRoom.Type == roomType)
            {
                roomFree = true;
                DateTime tempDate = booking.StartDate;
                while (tempDate.Date < booking.EndDate.Date)
                {
                    foreach (DateTime bookedDate in potentialRoom.BookedDays)
                    {
                        if (bookedDate.Date == tempDate.Date)
                        {
                            roomFree = false;
                            break;
                        }
                    }
                    if (!roomFree)
                    {
                        break;
                    }
                    room.BookedDays.Add(DateTime.SpecifyKind(tempDate, DateTimeKind.Utc));

                    tempDate = tempDate.AddDays(1);
                }
                if (roomFree)
                {
                    foreach (DateTime date in potentialRoom.BookedDays)
                    {
                        room.BookedDays.Add(DateTime.SpecifyKind(date, DateTimeKind.Utc));
                    }

                    return potentialRoom.RoomId;
                }
            }
        }
        return 0;
    }
}